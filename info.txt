    	----IO ---
 1. IO in java takes place as Stream(sequence of Bytes)
 2. Stream is kind of abstraction, hididng the lower level processing/signalling.
 3. An I/O Stream represents an input source or an output destination.
 4. Streams support many different kinds of data, including simple bytes, primitive data types, localized characters, and objects.     Some streams simply pass on data; others manipulate and transform the data in useful ways.
 eg. Stream can be understood as  a PIPE.. water PIPE or LPG PIPES can not be the same. Zipped or Cypher Input Stream

 5. Two types of Streams: byte stream(since jdk1.0) and Character Stream (since java2)
 6. a.) Byte stream is suitable for working with primitives or raw data(.jpg, mp4 etc.)
        -Class belonging to Byte Stream will be having 'Stream' as Suffix
	-Buffer is not used by default , though can be added.
	-I/O Stream Classes are at the top of hierarchy in Byte Stream

	b.)Character Stream suitable for Strings/Texts
	  -Content is not written to the file without close(), as buffer is not cleared.
      - suffix of the family would be 'reader/Writer'
      - By default, there is buffer used in Character Stream
      - For need for internationalisation/ translation-- use of character stream is recommended
      - Reader/ Writer Stream Classes are at the top of hierarchy in Character Stream
      - More efficient as it transfers the whole buffer at one time.
      - internally uses Byte Stream , Character Stream acts as Wrapper over it.
 6. Interconnect  different Streams.. zip and send file--> connect Zip Stream with File Stream--
 brings Flexibility/ Options as per requirements.

(BUFFER is temporary area of storage, easy to transfer the data --- default  size of buffer 8KB[jdk7] )

[Disk, Boot sector, tracks, seeking time(OS),access time, (Binary-> 0/1  represents voltage level)]

7. stream.close() , not mandatory with byteStream class i.e. content is written despite not closing the stream.

8. Once the buffer is emptied, the new content is added to the emptied buffer and the content is
   not written in the file till buffer is overflowed.

 9. After flush()...can write to file again
 10. close(), closes the stream , can not use the resource again.

 11. we can  read  only text file with stream, or the file with ASCII format.
 --For pdf, jpg etc.(these are binary files), require
 ==== copy a file, PrintWriter, serialisation, stdin/out stream
// 1,2 , 4,8 bytes: (byte, boolean), (short, char), int, (double,float)

#### SEQUENTIAL ACCESS ### VS. RANDOMACESSFILE
 12. DataInputStream/output: does not read/write character by character(unlike fileWriter) , has customized
  methods like readInt().
  usecase: to write primitive, to read in sequence
  : is byte oriented .



  To be Discussed: PrintWriter
  setOut, setIn(), setErr(), serialization
